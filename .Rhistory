install.packages(KernSmooth)
install.packages("KernSmooth")
library(KernSmooth)
library(swirl)
swirl
swirl()
my_data==NA
sum(my_na)
my_data
0/0
inf-inf
Inf-Inf
x
x[1:10]
x[is.na(x)]
x[!is.na(x)]
Y<-x[!is.na(x)]
y<-x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[c(-2,-10)]
x[-c(2,10)]
vect<-c(foo=11,bar=2, norf=NA)
vect
names(vect)
vect2<-c(11,2,NA)
names(vect2)<-c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo","bar")]
my_vector<-1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector)<-c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix<-my_vector
?matrix()
?matrix
my_matrix2<-matrix(1:20, 4,5)
identical(matrix, matrix2)
identical(my_matrix, my_matrix2)
patients<-c("Bill","Gina","Kelly","Sean")
cbind(patients, my_matrix)
my_data<-data.frame(patients, my_matrix)
my_data
class(my_data)
cnames<-c("patient", "age", "weight", "bp", "rating","test")
colnames(my_data, cnames)
colnames(my_data)<-cnames
my_data
setwd("~/Desktop/Coursera/Programming_in_R")
data<-read.csv("hw1_data.csv")
ozone
$ozone
ozone<-data[ ,1]
ozone
ozone_index<-ozone>31 & !is.na(x)
ozone_index<-ozone>31 & !is.na(ozone)
ozone_index
data2<-data[ozone_index, ]
data2
temp<-data2[ ,4]
temp
data3<-data2[temp_index, ]
ozone_index<-temp>90 & !is.na(temp)
ozone_index
data3<-data2[ozone_index, ]
data3
solar.r<-data3[,2]
solar.r
mean(solar.r)
data
month<-data[,5]
month
may_index<-month==5
june_index<-month==6
may_index
june_index
Q19_data<-data[,may_index]
Q19_data<-data[ ,may_index]
Q19_data<-data[may_index, ]
Q20 data<-data[june_index, ]
Q20_data<-data[june_index, ]
Q19_data
Q20_data
temp<-Q19_data[ ,4]
?mean
mean(temp, na.rm=TRUE)
temp
Q20_data<-data[may_index, ]
Q19_data<-data[june_index, ]
temp<-Q19_data[ ,4]
mean(temp, na.rm=TRUE)
ozone<-Q20_data[ ,1]
mean(ozone, na.rm=TRUE)
?max
max(ozone)
max(ozone, na.rm=TRUE)
?subset
setwd("~/Desktop/Coursera/Programming_in_R")
pollutantmean<-function(directory, id=1:332) {
files_list<-list.files(directory, full.names=TRUE) #creates a list of files
dat<-data.frame() #creates an empty data frame
for (i in id) { #loops through the files, performing rbind
dat<-rbin(dat,read.csv(files_list[i]))
}
}
pollutantmean<-function(directory, id=1:332) {
files_list<-list.files(directory, full.names=TRUE) #creates a list of files
dat<-data.frame() #creates an empty data frame
for (i in id) { #loops through the files, performing rbind
dat<-rbin(dat,read.csv(files_list[i]))
}
}
pollutantmean(directory = "specdata")
pollutantmean<-function(directory, id=1:332) {
files_list<-list.files(directory, full.names=TRUE) #creates a list of files
dat<-data.frame() #creates an empty data frame
for (i in id) { #loops through the files, performing rbind
dat<-rbind(dat,read.csv(files_list[i]))
}
}
pollutantmean(directory = "specdata")
dat
files_list
files_list<-list.files("specdata", full.names=TRUE)
files_list
dat<-data.frame()
dat
for (i in 1:332) {}
for (i in 1:332) {}
for (i in 1:332) { dat<-rbind(dat, read.csv(files_list[i])) }
dat
str(dat)
summary(dat)
rm(files_list)
rm(dat)
rm(i)
pollutantmean<-function(directory) {
files_list<-list.files(directory, full.names=TRUE) #creates a list of files
dat<-data.frame() #creates an empty data frame
for (i in 1:332) { #loops through the files, performing rbind
dat<-rbind(dat,read.csv(files_list[i]))
}
}
files_list
pollutantmean("specdata")
files_list
str(dat)
files_list<-list.files("specdata", full.names=TRUE)
files_list
rm(files_list)
rm(pollutantmean)
pollutantmean<-function(directory) {
files_list<-list.files(directory, full.names=TRUE)} #creates a list of files
files_list
files_list<-list.files("specdata", full.names=TRUE)
pollutantmean<-function(directory) {
files_list<-list.files(directory, full.names=TRUE)} #creates a list of files
rm(files_list)
pollutantmean("specdata")
files_list
rm(pollutantmean)
pollutantmean<-function(directory) {
files_list<-list.files(directory, full.names=TRUE)}
pollutantmean(directory= "specdata")
files_list
pollutantmean(directory = "specdata")
files_list
files_list<-list.files("specdata", full.names=TRUE)
files_list
rm(files_list, pollutantmean)
pollutantmean<-function(directory){
files_list<-list.files(directory="specdata", full.names=TRUE)
}
pollutantmean()
rm(pollutantmean)
pollutantmean<-function(directory){
files_list<-list.files(directory, full.names=TRUE)
}
pollutantmean(directory="specdata")
files_list
rm(pollutantmean)
weightedmedian<-function(directory) {
files_list<-list.files(directory, full.names=TRUE)
weightedmedian<-function(directory) {
files_list<-list.files(directory, full.names=TRUE)}
weightedmedian<-function(directory) {
files_list<-list.files(directory, full.names=TRUE)}
weightedmedian (directory = "diet_data")
rm(weightedmedian)
weightmedian<-function(directory, day) { #content of the function
files_list<-list.files(directory, full.names=TRUE) #creasts a list of files
dat<-data.frame() #creates an empty data frame
for (i in 1:5) { # loops through the files, ribing them
dat<-rbind(dat, read.csv(files_list[i]))
}
dat_subset<-dat[which(dat[,"Day"] == day), ] #subsets the rows tha tmatch the 'day'
median(dat_subset$Weight, na.rm=TRUE) #identified the median of a subset while stripping NA
}
weightedmedian(directory = "diet_data", day = 20)
weightmedian(directory = "diet_data", day = 20)
?gl()
library(datasets)
data(iris)
?library
?data()
?iris
str(iris)
summary(iris)
head(iris)
mean(iris$sepal.length)
mean(iris$sepal.length, na.rm)
mean(iris$sepal.length, na.rm=TRUE)
?mean()
mean(iris$Sepal.Length, na.rm=TRUE)
tapply(iris$Sepal.Length,iris$Species,mean, na.rm=TRUE)
colMeans(iris)
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
?mtcars
tapply(mtcars$mpg,mtcars$cyl,mean, na.rm=TRUE)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
sapply(split(mtcars$mpg, mtcars$hp), mean)
sapply(split(mtcars$hp, mtcars$cyl), mean)
209.21429-82.63636
tapply(mtcars$hp,mtcars$cyl,mean, na.rm=TRUE)
test<-function(directory,id) {
files_list<-list.files(directory, full.names=TRUE)
file<-subset(files_list, )
dat<-data.frame()
CC<-sum(complete.cases(file))
dat<-rbind(dat,c(id,CC))
}
debug(test)
n
test
n
debug(test)
?ls
debug(ls)
ls
n
set sead(1)
set.seed(1)
rpois(5,2)
?rpois()
set.seed(10)
x<-rbinom(10,10,0.5)
e<-rnorm(10,0,20)
y<-0.5+2*x+e
y
data<-read.csv("outcome-of-care-measures.csv", colClasses = "character")
setwd("~/Desktop/Coursera/Programming_in_R")
setwd("~/Desktop/Coursera/Programming_in_R")
data<-read.csv("outcome-of-care-measures.csv", colClasses = "character")
setwd("~/Desktop/Coursera/Programming_in_R/Third programming assignment")
data<-read.csv("outcome-of-care-measures.csv", colClasses = "character")
data<-data[,c("Hospital.Name","State", "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack","Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure","Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia")]
data<-data[,c("Hospital.Name","State", "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack","Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure","Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia")]
data$State<-factor(data$State)
levels(data)
levels(data$State)
split_data<-split(data,data$State)
str(split_data)
index<-3
split_data[,index]<-as.numeric(split_data[,index])
lapply(split_data,split_data[order(split_data[,index],split_data$Hospital.Name),])
lapply(split_data, function(x) colMeans(x[,index])
lapply(split_data, function(x) colMeans(x[,index]))
rank_order<-function(split_data,index) {
ranked_state_data<-split_data[order(split_data[,index],split_data$Hospital.Name),]
ranked_state_data<-ranked_state_data[which(ranked_state_data[,index] != "NA"),]
}
rank_order(split_data,index)
ranked_state_data<-split_data[order(split_data[,index],split_data$Hospital.Name),]
ranked_state_data<-split_data[order(split_data[1], split_data[,index],split_data$Hospital.Name),]
names(split_data)
lapply(names(split_data),ranked_state_data<-split_data[order(split_data[,index],split_data$Hospital.Name),])
str("AK")
head("AK")
str(split_data)
str(split_data$AK)
head(split_data$AK)
lapply(names(split_data),function (x) ranked_state_data<-split_data[order(split_data[,index],split_data$Hospital.Name),])
lapply(names(split_data),function (x) x[1,1])
?colmeans()
?colMeans()
lapply(names(split_data),colMeans(x))
lapply(names(split_data),function (x) colMeans(x))
?subset()
subset(split_data,split_data["AZ"])
split_data["AZ"]
lapply(split_data[names],function (x) ranked_state_data<-split_data[order(split_data[,index],split_data$Hospital.Name),])
split_data(names)
names(split_data)
lapply(names(split_data),function (x) return(split_data[1,1]))
lapply(names(split_data),function (x) x)
lapply(names(split_data),function (x) split_data[x])
x<-"CA"
split_data[x]
split_data[x,1,1]
dim(split_data)
dim(split_data[x])
?dim()
test<-split_data[x]
dim(test)
str(test)
?as.data.frame()
split_data[[1]]
str(split_data[[1]])
split_data[[1,1,1]]
split_data[[1]] [1,1]
?order()
lapply(names(split_data),function (x) (order(split_data[[x]] [,index], split_data[[x]] [,1] )
lapply(names(split_data),function (x) (order(split_data[[x]] [,index], split_data[[x]] [,1] ))
lapply(names(split_data),function (x) (order(split_data[[x]] [,index], split_data[[x]] [,1] )))
lapply(names(split_data),function (x) split_data[[x]] [(order(split_data[[x]] [,index], split_data[[x]] [,1] )))]
lapply(names(split_data),function (x) split_data[[x]] [(order(split_data[[x]] [,index], split_data[[x]] [,1] ))])
lapply(names(split_data),function (x) split_data[[x]] [(order(split_data[[x]] [,index], split_data[[x]] [,1] )))]
lapply(names(split_data),function (x) split_data[[x]] [(order(split_data[[x]] [,index], split_data[[x]] [,1] ))]
lapply(names(split_data),function (x) split_data[[x]] [(order(split_data[[x]] [,index], split_data[[x]] [,1]))]
lapply(names(split_data),function (x) split_data[[x]] [order(split_data[[x]] [,index], split_data[[x]] [,1])]
split_data[["AZ"]] [order(split_data[["AZ"]] [,index], split_data[["AZ"]] [,1])
split_data[["AZ"]] [order(split_data[["AZ"]] [,index], split_data[["AZ"]] [,1]]
split_data[["AZ"]] [order(split_data[["AZ"]] [,index], split_data[["AZ"]] [,1])]
split_data[["AZ"]] [order([,index], [,1])]
order(split_data[[AZ]],split_data[["AZ"]] [,index])
order(split_data[["AZ""]],split_data[["AZ"]] [,index])
order(split_data[["AZ"]],split_data[["AZ"]] [,index])
order(split_data[["CA"]],  split_data[["CA"]] [,index])
lapply(names(split_data),function (x) split_data[[x]] [order(split_data[[x]] [,index], split_data[[x]] [,1])]
lapply(names(split_data),function (x) split_data[[x]] [(order(split_data[[x]] [,index], split_data[[x]] [,1] ))),]
lapply(names(split_data),function (x) split_data[[x]] [order(split_data[[x]] [,index], split_data[[x]] [,1] ), ])
lapply(names(split_data),function (x) split_data[[x]] [order(split_data[[x]] [,index], split_data[[x]] [,1],na.last = NA ), ])
lapply(names(split_data),function (x) split_data[[x]] [order(split_data[[x]] [,index], split_data[[x]] [,1]), ])
lapply(names(split_data),function (x) na.omit(split_data[[x]] [order(split_data[[x]] [,index], split_data[[x]] [,1]), ]))
na.omit()
lapply(names(split_data),function (x) split_data[[x]] [order(split_data[[x]] [,index], split_data[[x]] [,1]), ])
lapply(names(split_data),function (x) split_data[[x]] [order(split_data[[x]] [,index], split_data[[x]] [,1]), ])
split_data<-lapply(names(split_data),function (x) split_data[[x]] [order(split_data[[x]] [,index], split_data[[x]] [,1]), ])
split_data<-lapply(names(split_data), function(x) which(split_data[[x]] [,index] !="NA"))
split_data
return(split_data)
print(split_data)
lapply(names(split_data),function (x) split_data[[x]] [order(split_data[[x]] [,index], split_data[[x]] [,1]), ])
data<-read.csv("outcome-of-care-measures.csv", colClasses = "character")
data<-data[,c("Hospital.Name","State", "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack","Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure","Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia")]
data[,index]<-as.numeric(data[,index])
split_data<-split(data,data$State)
lapply(names(split_data),function (x) split_data[[x]] [order(split_data[[x]] [,index], split_data[[x]] [,1] ), ])
plit_data<-split(data,data$State)
split_data<-split(data,data$State)
rm(plit_data)
split_data_ranked<-lapply(names(split_data),function (x) split_data[[x]] [order(split_data[[x]] [,index], split_data[[x]] [,1] ), ])
split_data_ranked2<-lapply(names(split_data), function(x) which(split_data[[x]] [,index] !="NA"))
split_data_ranked2
split_data<-split(data,data$State)
index<-5
lapply(names(split_data),function (x) split_data[[x]] [order(split_data[[x]] [,index], split_data[[x]] [,1] ), ])
index<-4
split_data<-split(data,data$State)
lapply(names(split_data),function (x) split_data[[x]] [order(split_data[[x]] [,index], split_data[[x]] [,1] ), ])
split_data<-split(data,data$State)
index<-3
test<-lapply(names(split_data),function (x) split_data[[x]] [order(split_data[[x]] [,index], split_data[[x]] [,1] ), ])
test
split_data<-split(data,data$State)
index<-4
test<-lapply(names(split_data),function (x) split_data[[x]] [order(split_data[[x]] [,index], split_data[[x]] [,1] ), ])
test
split_data<-split(data,data$State)
index<-5
test<-lapply(names(split_data),function (x) split_data[[x]] [order(split_data[[x]] [,index], split_data[[x]] [,1] ), ])
test
data<-read.csv("outcome-of-care-measures.csv", colClasses = "character")
data<-data[,c("Hospital.Name","State", "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack","Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure","Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia")]
index<-5
data[,index]<-as.numeric(data[,index])
split_data<-split(data,data$State)
lapply(names(split_data),function (x) split_data[[x]] [order(split_data[[x]] [,index], split_data[[x]] [,1] ), ])
?ave()
test<-split_data[["CA"]]
test
test<-lapply(names(split_data),function (x) split_data[[x]] [order(split_data[[x]] [,index], split_data[[x]] [,1] ), ])
index<-5
test<-lapply(names(split_data),function (x) split_data[[x]] [order(split_data[[x]] [,index], split_data[[x]] [,1] ), ])
test
test<-test[[WY]]
test<-test[["WY"]]
test
test<-lapply(names(split_data),function (x) split_data[[x]] [order(split_data[[x]] [,index], split_data[[x]] [,1] ), ])
test<-test[[x]]
test<-lapply(names(split_data),function (x) split_data[[x]] [order(split_data[[x]] [,index], split_data[[x]] [,1] ), ])
test[["WY"]] [ , ]
test<-lapply(names(split_data),function (x) split_data[[x]] [order(split_data[[x]] [,index], split_data[[x]] [,1] ), ])
test
list<-test[["AZ"]] [1,1]
str(test)
test[[1]]
test[[1]] [1,1]
?as.data.frame()
`%ni%` <- Negate(`%in%`)
setwd("~/Desktop/Coursera/Programming_in_R/Third programming assignment")
data<-read.csv("outcome-of-care-measures.csv", colClasses = "character")
data<-data[,c("Hospital.Name","State", "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack","Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure","Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia")]
index<-3
data[,index]<-as.numeric(data[,index])
split_data<-split(data,data$State)
sorted_data<-lapply(names(split_data),function (x) split_data[[x]] [order(split_data[[x]] [,index], split_data[[x]] [,1] ), ])
position<-20
list<-lapply(1:length(sorted-data), function(x) sorted_data[[x]] [position,1])
list<-lapply(1:length(sorted_data), function(x) sorted_data[[x]] [position,1])
list
output<-as.data.frame(cbind(names(split_data),list))
output
?colnames
`%ni%` <- Negate(`%in%`)
data<-read.csv("outcome-of-care-measures.csv", colClasses = "character")
ata<-data[,c("Hospital.Name","State", "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack","Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure","Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia")]
OK_outcome<-c("heart attack","heart failure", "pneumonia")
index<-4
data[,index]<-as.numeric(data[,index])
OK_num<-c(seq(1:length(data[,index])),"best","worst")
split_data<-split(data,data$State)
sorted_data<-lapply(names(split_data),function (x) split_data[[x]] [order(split_data[[x]] [,index], split_data[[x]] [,1] ), ])
num<-"best"
if (num == "best") position<-as.numeric(1)
list<-lapply(1:length(sorted_data), function(x) sorted_data[[x]] [position,1])
output<-as.data.frame(cbind(list,names(split_data)))
colnames(output)<-c("hostpital","state")
output
num<-10
list<-lapply(1:length(sorted_data), function(x) sorted_data[[x]] [position,1])
list
split_data
`%ni%` <- Negate(`%in%`)
data<-read.csv("outcome-of-care-measures.csv", colClasses = "character")
data<-data[,c("Hospital.Name","State", "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack","Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure","Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia")]
position<-1
index<-4
data[,index]<-as.numeric(data[,index])
data
split_data<-split(data,data$State)
split_data
sorted_data<-lapply(names(split_data),function (x) split_data[[x]] [order(split_data[[x]] [,index], split_data[[x]] [,1] ), ])
list<-lapply(1:length(sorted_data), function(x) sorted_data[[x]] [position,2])
list
output<-as.data.frame(cbind(list,names(split_data)))
colnames(output)<-c("hostpital","state")
output
str(sorted_data)
View(data)
View(data)
list<-lapply(1:length(sorted_data), function(x) sorted_data[[x]] [position,1])
list
output<-as.data.frame(cbind(list,names(split_data)))
colnames(output)<-c("hospital","state")
output
rankall<-function(outcome, num = "best") {
data<-read.csv("outcome-of-care-measures.csv", colClasses = "character")
data<-data[,c("Hospital.Name","State", "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack","Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure","Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia")]
OK_outcome<-c("heart attack","heart failure", "pneumonia")
if (outcome %ni% OK_outcome) stop("invalid outcome")
if (outcome=="heart attack") index<-3
if (outcome=="heart failure") index<-4
if (outcome=="pneumonia") index<-5
data[,index]<-as.numeric(data[,index])
OK_num<-c(seq(1:length(data[,index])),"best","worst")
split_data<-split(data,data$State)
sorted_data<-lapply(names(split_data),function (x) split_data[[x]] [order(split_data[[x]] [,index], split_data[[x]] [,1] ), ])
if (num == "best") position<-as.numeric(1)
else position<-num
list<-lapply(1:length(sorted_data), function(x) sorted_data[[x]] [position,1])
output<-as.data.frame(cbind(list,names(split_data)))
colnames(output)<-c("hospital","state")
output
}
head(rankall("heart attack",20),10)
tail(rankall("heart failure"),10)
`%ni%` <- Negate(`%in%`)
setwd("~/Desktop/Coursera/Programming_in_R/Third programming assignment")
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
submit(manual=TRUE)
submit()
submit()
submit()
